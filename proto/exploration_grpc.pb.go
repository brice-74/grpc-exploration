// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/exploration.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExplorationService_UnaryCall_FullMethodName                  = "/exploration.explorationService/UnaryCall"
	ExplorationService_ServerStreamingCall_FullMethodName        = "/exploration.explorationService/ServerStreamingCall"
	ExplorationService_ClientStreamingCall_FullMethodName        = "/exploration.explorationService/ClientStreamingCall"
	ExplorationService_BidirectionalStreamingCall_FullMethodName = "/exploration.explorationService/BidirectionalStreamingCall"
)

// ExplorationServiceClient is the client API for ExplorationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExplorationServiceClient interface {
	UnaryCall(ctx context.Context, in *ExplorationRequest, opts ...grpc.CallOption) (*ExplorationResponse, error)
	ServerStreamingCall(ctx context.Context, in *ExplorationRequest, opts ...grpc.CallOption) (ExplorationService_ServerStreamingCallClient, error)
	ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (ExplorationService_ClientStreamingCallClient, error)
	BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (ExplorationService_BidirectionalStreamingCallClient, error)
}

type explorationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExplorationServiceClient(cc grpc.ClientConnInterface) ExplorationServiceClient {
	return &explorationServiceClient{cc}
}

func (c *explorationServiceClient) UnaryCall(ctx context.Context, in *ExplorationRequest, opts ...grpc.CallOption) (*ExplorationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExplorationResponse)
	err := c.cc.Invoke(ctx, ExplorationService_UnaryCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explorationServiceClient) ServerStreamingCall(ctx context.Context, in *ExplorationRequest, opts ...grpc.CallOption) (ExplorationService_ServerStreamingCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExplorationService_ServiceDesc.Streams[0], ExplorationService_ServerStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &explorationServiceServerStreamingCallClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExplorationService_ServerStreamingCallClient interface {
	Recv() (*ExplorationResponse, error)
	grpc.ClientStream
}

type explorationServiceServerStreamingCallClient struct {
	grpc.ClientStream
}

func (x *explorationServiceServerStreamingCallClient) Recv() (*ExplorationResponse, error) {
	m := new(ExplorationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *explorationServiceClient) ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (ExplorationService_ClientStreamingCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExplorationService_ServiceDesc.Streams[1], ExplorationService_ClientStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &explorationServiceClientStreamingCallClient{ClientStream: stream}
	return x, nil
}

type ExplorationService_ClientStreamingCallClient interface {
	Send(*ExplorationRequest) error
	CloseAndRecv() (*ExplorationResponse, error)
	grpc.ClientStream
}

type explorationServiceClientStreamingCallClient struct {
	grpc.ClientStream
}

func (x *explorationServiceClientStreamingCallClient) Send(m *ExplorationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *explorationServiceClientStreamingCallClient) CloseAndRecv() (*ExplorationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ExplorationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *explorationServiceClient) BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (ExplorationService_BidirectionalStreamingCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExplorationService_ServiceDesc.Streams[2], ExplorationService_BidirectionalStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &explorationServiceBidirectionalStreamingCallClient{ClientStream: stream}
	return x, nil
}

type ExplorationService_BidirectionalStreamingCallClient interface {
	Send(*ExplorationRequest) error
	Recv() (*ExplorationResponse, error)
	grpc.ClientStream
}

type explorationServiceBidirectionalStreamingCallClient struct {
	grpc.ClientStream
}

func (x *explorationServiceBidirectionalStreamingCallClient) Send(m *ExplorationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *explorationServiceBidirectionalStreamingCallClient) Recv() (*ExplorationResponse, error) {
	m := new(ExplorationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExplorationServiceServer is the server API for ExplorationService service.
// All implementations must embed UnimplementedExplorationServiceServer
// for forward compatibility
type ExplorationServiceServer interface {
	UnaryCall(context.Context, *ExplorationRequest) (*ExplorationResponse, error)
	ServerStreamingCall(*ExplorationRequest, ExplorationService_ServerStreamingCallServer) error
	ClientStreamingCall(ExplorationService_ClientStreamingCallServer) error
	BidirectionalStreamingCall(ExplorationService_BidirectionalStreamingCallServer) error
	mustEmbedUnimplementedExplorationServiceServer()
}

// UnimplementedExplorationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExplorationServiceServer struct {
}

func (UnimplementedExplorationServiceServer) UnaryCall(context.Context, *ExplorationRequest) (*ExplorationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (UnimplementedExplorationServiceServer) ServerStreamingCall(*ExplorationRequest, ExplorationService_ServerStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingCall not implemented")
}
func (UnimplementedExplorationServiceServer) ClientStreamingCall(ExplorationService_ClientStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingCall not implemented")
}
func (UnimplementedExplorationServiceServer) BidirectionalStreamingCall(ExplorationService_BidirectionalStreamingCallServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingCall not implemented")
}
func (UnimplementedExplorationServiceServer) mustEmbedUnimplementedExplorationServiceServer() {}

// UnsafeExplorationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExplorationServiceServer will
// result in compilation errors.
type UnsafeExplorationServiceServer interface {
	mustEmbedUnimplementedExplorationServiceServer()
}

func RegisterExplorationServiceServer(s grpc.ServiceRegistrar, srv ExplorationServiceServer) {
	s.RegisterService(&ExplorationService_ServiceDesc, srv)
}

func _ExplorationService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplorationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExplorationServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExplorationService_UnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExplorationServiceServer).UnaryCall(ctx, req.(*ExplorationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExplorationService_ServerStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExplorationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExplorationServiceServer).ServerStreamingCall(m, &explorationServiceServerStreamingCallServer{ServerStream: stream})
}

type ExplorationService_ServerStreamingCallServer interface {
	Send(*ExplorationResponse) error
	grpc.ServerStream
}

type explorationServiceServerStreamingCallServer struct {
	grpc.ServerStream
}

func (x *explorationServiceServerStreamingCallServer) Send(m *ExplorationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExplorationService_ClientStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExplorationServiceServer).ClientStreamingCall(&explorationServiceClientStreamingCallServer{ServerStream: stream})
}

type ExplorationService_ClientStreamingCallServer interface {
	SendAndClose(*ExplorationResponse) error
	Recv() (*ExplorationRequest, error)
	grpc.ServerStream
}

type explorationServiceClientStreamingCallServer struct {
	grpc.ServerStream
}

func (x *explorationServiceClientStreamingCallServer) SendAndClose(m *ExplorationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *explorationServiceClientStreamingCallServer) Recv() (*ExplorationRequest, error) {
	m := new(ExplorationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExplorationService_BidirectionalStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExplorationServiceServer).BidirectionalStreamingCall(&explorationServiceBidirectionalStreamingCallServer{ServerStream: stream})
}

type ExplorationService_BidirectionalStreamingCallServer interface {
	Send(*ExplorationResponse) error
	Recv() (*ExplorationRequest, error)
	grpc.ServerStream
}

type explorationServiceBidirectionalStreamingCallServer struct {
	grpc.ServerStream
}

func (x *explorationServiceBidirectionalStreamingCallServer) Send(m *ExplorationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *explorationServiceBidirectionalStreamingCallServer) Recv() (*ExplorationRequest, error) {
	m := new(ExplorationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExplorationService_ServiceDesc is the grpc.ServiceDesc for ExplorationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExplorationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exploration.explorationService",
	HandlerType: (*ExplorationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _ExplorationService_UnaryCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingCall",
			Handler:       _ExplorationService_ServerStreamingCall_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingCall",
			Handler:       _ExplorationService_ClientStreamingCall_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingCall",
			Handler:       _ExplorationService_BidirectionalStreamingCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/exploration.proto",
}
